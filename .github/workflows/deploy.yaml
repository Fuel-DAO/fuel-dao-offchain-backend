name: Deploy to Fly.io

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main



env:
  FLY_IO_DEPLOY_TOKEN: ${{ secrets.FLY_IO_DEPLOY_TOKEN }}
  BACKEND: ${{ secrets.BACKEND }}
  RUST_LOG: ${{ secrets.RUST_LOG }}
  SERVER_PORT: ${{ secrets.SERVER_PORT }}
  EMAIL_CLIENT_ID: ${{ secrets.EMAIL_CLIENT_ID }}
  EMAIL_CLIENT_SECRET: ${{ secrets.EMAIL_CLIENT_SECRET }}
  EMAIL_ACCESS_TOKEN: ${{ secrets.EMAIL_ACCESS_TOKEN }}
  EMAIL_REFRESH_TOKEN: ${{ secrets.EMAIL_REFRESH_TOKEN }}

jobs:
  build_check:
    uses: ./.github/workflows/build-check.yaml
    with:
      publish-artifact: true
  deploy:
    name: Deploy app
    needs: build_check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: build-musl
      - name: Setup dfx
        uses: dfinity/setup-dfx@main

      - run: chmod +x target/x86_64-unknown-linux-musl/release/offchain-server

      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Create Fly.io App (if not exists)
        run: |
          flyctl apps create offchain-server --org fuel-dao || echo "App already exists, skipping creation"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_IO_DEPLOY_TOKEN }}

      - uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Set Fly.io secrets
        run: |
          flyctl secrets set BACKEND="${BACKEND}" \
                       RUST_LOG="${RUST_LOG}" \
                       SERVER_PORT="${SERVER_PORT}" \
                       EMAIL_CLIENT_ID="${EMAIL_CLIENT_ID}" \
                       EMAIL_CLIENT_SECRET="${EMAIL_CLIENT_SECRET}" \
                       EMAIL_ACCESS_TOKEN="${EMAIL_ACCESS_TOKEN}" \
                       EMAIL_REFRESH_TOKEN="${EMAIL_REFRESH_TOKEN}" \
                       --app "offchain-server" --stage


      - name: Reset Fly.io app state
        run: flyctl apps reset --app "offchain-server"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_IO_DEPLOY_TOKEN }}

      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Deploy a docker container to fly.io
        run: flyctl deploy --remote-only --depot=false
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_IO_DEPLOY_TOKEN }}
          BACKEND: ${{ secrets.BACKEND }}
          RUST_LOG: ${{ secrets.RUST_LOG }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          EMAIL_CLIENT_ID: ${{ secrets.EMAIL_CLIENT_ID }}
          EMAIL_CLIENT_SECRET: ${{ secrets.EMAIL_CLIENT_SECRET }}
          EMAIL_ACCESS_TOKEN: ${{ secrets.EMAIL_ACCESS_TOKEN }}
          EMAIL_REFRESH_TOKEN: ${{ secrets.EMAIL_REFRESH_TOKEN }}
 # Specify the app name here
