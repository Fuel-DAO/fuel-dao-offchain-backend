name: Build and Check linting

on:
  workflow_call:
    inputs:
      publish-artifact:
        default: false
        required: false
        type: boolean
  workflow_dispatch:
  pull_request:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: build check
    runs-on: ubuntu-latest

    env:
      BACKEND: ${{ secrets.BACKEND }}
      RUST_LOG: ${{ secrets.RUST_LOG }}
      SERVER_PORT: ${{ secrets.SERVER_PORT }}
      EMAIL_CLIENT_ID: ${{ secrets.EMAIL_CLIENT_ID }}
      EMAIL_CLIENT_SECRET: ${{ secrets.EMAIL_CLIENT_SECRET }}
      EMAIL_ACCESS_TOKEN: ${{ secrets.EMAIL_ACCESS_TOKEN }}
      EMAIL_REFRESH_TOKEN: ${{ secrets.EMAIL_REFRESH_TOKEN }}

    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install prereqs
        run: |
          sudo apt-get install musl-tools libssl-dev


      - name: Rust Setup
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "stable"
          targets: "x86_64-unknown-linux-musl"

      - name: Build setup
        run: |
          rustup target add x86_64-unknown-linux-musl
          rustup component add rustfmt
          rustup component add clippy
      # - name: lint check
      #   run: |
      #     cargo fmt --check
      #     cargo clippy --no-deps --all-features --release -- -Dwarnings
      - name: Build
        run: cargo build --release --target x86_64-unknown-linux-musl
        env:
          TARGET_CC: x86_64-linux-musl-gcc
      # - name: Run tests
      #   run: cargo test --verbose
      - run: touch .empty
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        if: ${{ inputs.publish-artifact }}
        with:
          name: build-musl
          path: |
            target/x86_64-unknown-linux-musl/release/offchain_server
            .empty