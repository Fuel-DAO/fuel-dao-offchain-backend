name: build and check linting
on:
  workflow_call:
    inputs:
      publish-artifact:
        default: false
        required: false
        type: boolean
  workflow_dispatch:
  pull_request:
    branches:
      - main
env:
  cargo_term_color: always
jobs:
  build:
    name: build check
    runs-on: ubuntu-latest
    env:
      backend: ${{ secrets.backend }}
      rust_log: ${{ secrets.rust_log }}
      server_port: ${{ secrets.server_port }}
      email_client_id: ${{ secrets.email_client_id }}
      email_client_secret: ${{ secrets.email_client_secret }}
      email_access_token: ${{ secrets.email_access_token }}
      email_refresh_token: ${{ secrets.email_refresh_token }}
    steps:
      - name: checkout repository and submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools pkg-config build-essential
          sudo apt-get install -y libssl-dev
          sudo apt-get install -y libcurl4-openssl-dev

      - name: rust setup
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "stable"
          targets: "x86_64-unknown-linux-musl"

      - name: build setup
        run: |
          rustup target add x86_64-unknown-linux-musl
          rustup component add rustfmt
          rustup component add clippy

      # - name: lint check
      #   run: |
      #     cargo fmt --check
      #     cargo clippy --no-deps --all-features --release -- -dwarnings

      - name: Build
        env:
          PKG_CONFIG_ALLOW_CROSS: 1
          OPENSSL_DIR: /usr/local/musl
          PKG_CONFIG_PATH: /usr/local/musl/lib/pkgconfig
          PKG_CONFIG_SYSROOT_DIR: /usr/local/musl
          OPENSSL_STATIC: 1
        run: |
          sudo ln -s /usr/include/x86_64-linux-gnu/asm /usr/include/x86_64-linux-musl/asm && sudo ln -s /usr/include/asm-generic /usr/include/x86_64-linux-musl/asm-generic && sudo ln -s /usr/include/linux /usr/include/x86_64-linux-musl/linux
          cargo build --target x86_64-unknown-linux-musl --release

      - run: touch .empty

      - name: archive production artifacts
        uses: actions/upload-artifact@v4
        if: ${{ inputs.publish-artifact }}
        with:
          name: build-musl
          path: |
            target/x86_64-unknown-linux-musl/release/offchain_server
            .empty
